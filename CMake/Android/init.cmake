# Android Main File
cmake_minimum_required(VERSION 2.8.5)

### Target Platorm Informations
set(CMAKE_SYSTEM_NAME "Linux")
set(CMAKE_SYSTEM_VERSION 1)

### Find user configuration
set(RETURN_CODE 0)
# Host system name (for tools path)
if(CMAKE_HOST_WIN32)
	message(STATUS "Generating cross-compiling Makefile on Windows")
	set(ANDROID_HOST_SYSTEM_NAME "windows")
elseif(CMAKE_HOST_APPLE)
	message(STATUS "Generating cross-compiling Makefile on Apple")
	set(ANDROID_HOST_SYSTEM_NAME "darwin-x86")
elseif(CMAKE_HOST_UNIX)
	message(STATUS "Generating cross-compiling Makefile on Linux")
	set(ANDROID_HOST_SYSTEM_NAME "linux-x86")
else()
	ReturnWithCode("Unable to cross-compile for Android with this toolchain on this platform." 6)
endif(CMAKE_HOST_WIN32)
# Android SDK Path
SearchParameter(ANDROID_NDK_PATH FILEPATH "Path to the Android SDK")
if(DEFINED ANDROID_NDK_PATH)
	set(__tmp_android_ndk_path "${ANDROID_NDK_PATH}")
	unset(ANDROID_NDK_PATH CACHE)
	get_filename_component(ANDROID_NDK_PATH "${__tmp_android_ndk_path}" ABSOLUTE CACHE)
	message(STATUS "Found Android NDK in ${ANDROID_NDK_PATH}")
else()
	set(RETURN_CODE 2002)
	message(SEND_ERROR "Please specify a path to the Android NDK (ANDROID_NDK_PATH).")
endif(DEFINED ANDROID_NDK_PATH)
# Android architecture
FindValidParameter(TARGET_ARCHITECTURE "${ANDROID_ARCHITECTURE_LIST}" _FOUND "Android Architecture")
if(NOT _FOUND)
	set(RETURN_CODE 113)
	message(SEND_ERROR
		"Please set a valid Architecture for Android (TARGET_ARCHITECTURE).\nValids Architectures are ${ANDROID_ARCHITECTURE_LIST}.")
else()
	message(STATUS "Targeting Architecture ${TARGET_ARCHITECTURE}")
	set(CMAKE_SYSTEM_PROCESSOR "${TARGET_ARCHITECTURE}")
endif(NOT _FOUND)
# Android Api Version
FindValidParameter(ANDROID_API_VERSION "${ANDROID_API_VERSION_LIST}" _FOUND "Android API Version")
if(NOT _FOUND)
	set(RETURN_CODE 2003)
	message(SEND_ERROR
		"Please set a valid Version for Android (ANDROID_API_VERSION).\nValids Versions are ${ANDROID_API_VERSION_LIST}.")
else()
	message(STATUS "Targeting Version ${ANDROID_API_VERSION}")
endif(NOT _FOUND)
# Find the Api Level to use
set(ANDROID_SELECTED_API_LEVEL "${ANDROID_VERSION_TO_API_LEVEL_${ANDROID_API_VERSION}}")
message(STATUS "Correponding api level for the targeted version is ${ANDROID_SELECTED_API_LEVEL}")
file(GLOB ANDROID_API_LEVEL_NDK_LIST RELATIVE "${ANDROID_NDK_PATH}/platforms" "${ANDROID_NDK_PATH}/platforms/android-*")
string(REPLACE "android-" "" ANDROID_API_LEVEL_NDK_LIST "${ANDROID_API_LEVEL_NDK_LIST}")
set(ANDROID_API_LEVEL 0)
foreach(_level ${ANDROID_API_LEVEL_NDK_LIST})
	if((${_level} LESS ${ANDROID_SELECTED_API_LEVEL} OR ${_level} EQUAL ${ANDROID_SELECTED_API_LEVEL}) AND (${_level} GREATER ${ANDROID_API_LEVEL}))
		set(ANDROID_API_LEVEL ${_level})
	endif((${_level} LESS ${ANDROID_SELECTED_API_LEVEL} OR ${_level} EQUAL ${ANDROID_SELECTED_API_LEVEL}) AND (${_level} GREATER ${ANDROID_API_LEVEL}))
endforeach(_level ${ANDROID_API_LEVEL_NDK_LIST})
if(ANDROID_API_LEVEL EQUAL 0)
	set(RETURN_CODE 2004)
	message(SEND_ERROR
		"No API installed in the specified NDK is older than the specified version.\nPlease set a newer version.")
else()
	message(STATUS "According to installed api on the specified NDK, the api level ${ANDROID_API_LEVEL} will be used")
endif(ANDROID_API_LEVEL EQUAL 0)
# Find the selected c++ stdlib
file(GLOB ANDROID_STDCXX_LIST RELATIVE "${ANDROID_NDK_PATH}/sources/cxx-stl" "${ANDROID_NDK_PATH}/sources/cxx-stl/*")
foreach(_stdcxx ${ANDROID_STDCXX_LIST})
	if(NOT IS_DIRECTORY "${ANDROID_NDK_PATH}/sources/cxx-stl/${_stdcxx}")
		list(REMOVE_ITEM ANDROID_STDCXX_LIST "${_stdcxx}")
	endif(NOT IS_DIRECTORY "${ANDROID_NDK_PATH}/sources/cxx-stl/${_stdcxx}")
endforeach(_stdcxx ${ANDROID_STDCXX_LIST})
FindValidParameter(ANDROID_STDCXX "${ANDROID_STDCXX_LIST}" _FOUND "Android C++ stdlib")
if(NOT _FOUND)
	set(RETURN_CODE 2005)
	message(SEND_ERROR
		"Please set a valid c++ stdlib (ANDROID_STDCXX).\nInstalled c++ stdlibs installed on the specified ndk are ${ANDROID_STDCXX_LIST}.")
else()
	message(STATUS "Using c++ stdlib ${ANDROID_STDCXX}")
endif(NOT _FOUND)

### Process configuration
# Error in configuration, stop here
if(NOT "${RETURN_CODE}" EQUAL "0")
	ReturnWithCode("Please review your configuration." ${RETURN_CODE})
endif(NOT "${RETURN_CODE}" EQUAL "0")
# search programs only in ndk
set(CMAKE_PREFIX_PATH "${ANDROID_NDK_PATH}")
# Search for the most recent toolchain for selected abi
set(ANDROID_ARCHITECTURE_INPATH "${ANDROID_ARCHITECTURE_INPATH_${TARGET_ARCHITECTURE}}")
file(GLOB ANDROID_TOOLCHAIN_LIST RELATIVE "${ANDROID_NDK_PATH}/toolchains" "${ANDROID_NDK_PATH}/toolchains/${ANDROID_ARCHITECTURE_INPATH}-*")
set(ANDROID_TOOLCHAIN_VERSION "0")
set(ANDROID_TOOLCHAIN_MACHINE "")
set(ANDROID_TOOLCHAIN_PATH "")
foreach(_toolchain ${ANDROID_TOOLCHAIN_LIST})
	string(REGEX MATCH "[0-9]+[.][0-9]+[.]*[0-9]*$" _version "${_toolchain}")
	if(${_version} VERSION_GREATER ${ANDROID_TOOLCHAIN_VERSION})
		set(ANDROID_TOOLCHAIN_VERSION ${_version})
		set(ANDROID_TOOLCHAIN_PATH "${ANDROID_NDK_PATH}/toolchains/${_toolchain}/prebuilt/${ANDROID_HOST_SYSTEM_NAME}")
	endif(${_version} VERSION_GREATER ${ANDROID_TOOLCHAIN_VERSION})
endforeach(_toolchain ${ANDROID_TOOLCHAIN_LIST})
if((${ANDROID_TOOLCHAIN_VERSION} EQUAL 0) OR ("${ANDROID_TOOLCHAIN_PATH}" STREQUAL ""))
	ReturnWithCode("No valid toolchain has been found for the specified abi on your platform." 112)
endif((${ANDROID_TOOLCHAIN_VERSION} EQUAL 0) OR ("${ANDROID_TOOLCHAIN_PATH}" STREQUAL ""))
# Find prefix for all tools for the selected toolchain
file(GLOB ANDROID_TOOL_PREFIX "${ANDROID_TOOLCHAIN_PATH}/bin/*-gcc${EXE_SUFFIX}")
list(LENGTH ANDROID_TOOL_PREFIX _COUNT)
if(NOT ${_COUNT} EQUAL 1)
	ReturnWithCode("Could not find unique tool prefix in ${ANDROID_TOOLCHAIN_PATH}" 2001)
endif(NOT ${_COUNT} EQUAL 1)
get_filename_component(ANDROID_TOOL_PREFIX "${ANDROID_TOOL_PREFIX}" NAME_WE)
string(REPLACE "-gcc" "" ANDROID_TOOL_PREFIX "${ANDROID_TOOL_PREFIX}")
set(ANDROID_C_COMPILER   "${ANDROID_TOOLCHAIN_PATH}/bin/${ANDROID_TOOL_PREFIX}-gcc${EXE_SUFFIX}")
set(ANDROID_CXX_COMPILER "${ANDROID_TOOLCHAIN_PATH}/bin/${ANDROID_TOOL_PREFIX}-g++${EXE_SUFFIX}")
set(ANDROID_COMPILER_ID GNU)
# Search for the most recent llvm
set(ANDROID_LLVM_C_FLAGS "")
if(${BUILD_WITH_LLVM})
	file(GLOB ANDROID_LLVM_LIST RELATIVE "${ANDROID_NDK_PATH}/toolchains" "${ANDROID_NDK_PATH}/toolchains/llvm-*")
	set(ANDROID_LLVM_VERSION "0")
	set(ANDROID_LLVM_PATH "")
	foreach(_llvm ${ANDROID_LLVM_LIST})
		string(REGEX MATCH "[0-9]+[.][0-9]+[.]*[0-9]*$" _version "${_llvm}")
		if(${_version} VERSION_GREATER ${ANDROID_LLVM_VERSION})
			set(ANDROID_LLVM_VERSION ${_version})
			set(ANDROID_LLVM_PATH "${ANDROID_NDK_PATH}/toolchains/${_llvm}/prebuilt/${ANDROID_HOST_SYSTEM_NAME}")
		endif(${_version} VERSION_GREATER ${ANDROID_LLVM_VERSION})
	endforeach(_llvm ${ANDROID_LLVM_LIST})
	if((${ANDROID_LLVM_VERSION} EQUAL 0) OR ("${ANDROID_LLVM_PATH}" STREQUAL ""))
		message(WARNING "Could not find llvm compiler for Android. Switching to gcc.")
	else()
		set(ANDROID_C_COMPILER   "${ANDROID_LLVM_PATH}/bin/clang${EXE_SUFFIX}")
		set(ANDROID_CXX_COMPILER "${ANDROID_LLVM_PATH}/bin/clang++${EXE_SUFFIX}")
		set(ANDROID_COMPILER_ID Clang)
		set(ANDROID_LLVM_C_FLAGS "-gcc-toolchain \"${ANDROID_TOOLCHAIN_PATH}\"" CACHE INTERNAL "Android C Flags for all configurations | all architectures")
	endif((${ANDROID_LLVM_VERSION} EQUAL 0) OR ("${ANDROID_LLVM_PATH}" STREQUAL ""))
endif(${BUILD_WITH_LLVM})
### Set cmake internal variables
# Set paths
set(ANDROID_TOOLCHAIN_PATH "${ANDROID_TOOLCHAIN_PATH}")
set(ANDROID_ROOT_PATH "${ANDROID_NDK_PATH}/platforms/android-${ANDROID_API_LEVEL}/arch-${ANDROID_ARCHITECTURE_INPATH}")
set(ANDROID_INCLUDE_PATH "")
set(ANDROID_LIB_PATH "")
set(CXX_LINK_FLAG "")
if("${ANDROID_STDCXX}" STREQUAL "stlport")
	list(APPEND ANDROID_INCLUDE_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/stlport/stlport")
	list(APPEND ANDROID_LIB_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/stlport/libs/${TARGET_ARCHITECTURE}")
	set(CXX_LINK_FLAG "-lstlport_shared")
elseif("${ANDROID_STDCXX}" STREQUAL "gabi++")
	message(WARNING "gabi++ does not support stl, which is used by the environment header Environment.h.\nThe compilation of your project may fail.")
	list(APPEND ANDROID_INCLUDE_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/gabi++/include")
	list(APPEND ANDROID_LIB_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/gabi++/libs/${TARGET_ARCHITECTURE}")
	set(CXX_LINK_FLAG "-lgabi++_shared")
elseif("${ANDROID_STDCXX}" STREQUAL "gnu-libstdc++")
	list(APPEND ANDROID_INCLUDE_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/gnu-libstdc++/${ANDROID_TOOLCHAIN_VERSION}/include")
	list(APPEND ANDROID_INCLUDE_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/gnu-libstdc++/${ANDROID_TOOLCHAIN_VERSION}/libs/${TARGET_ARCHITECTURE}/include")
	list(APPEND ANDROID_LIB_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/gnu-libstdc++/${ANDROID_TOOLCHAIN_VERSION}/libs/${TARGET_ARCHITECTURE}")
	set(CXX_LINK_FLAG "-lgnustl_shared")
elseif("${ANDROID_STDCXX}" STREQUAL "system")
	message(WARNING "system does not support stl, which is used by the environment header Environment.h.\nThe compilation of your project may fail.")
	list(APPEND ANDROID_INCLUDE_PATH "${ANDROID_NDK_PATH}/sources/cxx-stl/system/include")
endif("${ANDROID_STDCXX}" STREQUAL "stlport")
# Set compiler
set(CMAKE_C_COMPILER   "${ANDROID_C_COMPILER}" CACHE FILEPATH "C Compiler")
set(CMAKE_CXX_COMPILER "${ANDROID_CXX_COMPILER}" CACHE FILEPATH "CXX Compiler")
set(CMAKE_AR           "${ANDROID_TOOLCHAIN_PATH}/bin/${ANDROID_TOOL_PREFIX}-ar${EXE_SUFFIX}" CACHE FILEPATH "Archiver")
set(CMAKE_LINKER       "${ANDROID_TOOLCHAIN_PATH}/bin/${ANDROID_TOOL_PREFIX}-ld${EXE_SUFFIX}" CACHE FILEPATH "Linker")
list(APPEND ANDROID_INCLUDE_PATH "${ANDROID_ROOT_PATH}/usr/include")
list(APPEND ANDROID_LIB_PATH "${ANDROID_ROOT_PATH}/usr/lib")
include_directories(SYSTEM ${ANDROID_INCLUDE_PATH})
link_directories(${ANDROID_LIB_PATH})
# Flags (see constants.cmake)
remove_definitions(${ANDROID_C_DEFINITIONS} ${ANDROID_C_DEFINITIONS_Release} ${ANDROID_C_DEFINITIONS_Debug} ${ANDROID_C_DEFINITIONS_${TARGET_ARCHITECTURE}} ${ANDROID_C_DEFINITIONS_${TARGET_ARCHITECTURE}_Release} ${ANDROID_C_DEFINITIONS_${TARGET_ARCHITECTURE}_Debug})
add_definitions(${ANDROID_C_DEFINITIONS} ${ANDROID_C_DEFINITIONS_${CMAKE_BUILD_TYPE}} ${ANDROID_C_DEFINITIONS_${TARGET_ARCHITECTURE}} ${ANDROID_C_DEFINITIONS_${TARGET_ARCHITECTURE}_${CMAKE_BUILD_TYPE}})
set(CMAKE_C_FLAGS "--sysroot=\"${ANDROID_ROOT_PATH}\" ${ANDROID_LLVM_C_FLAGS} ${ANDROID_C_FLAGS} ${ANDROID_C_FLAGS_${TARGET_ARCHITECTURE}}" CACHE STRING "C Flags")
set(CMAKE_C_FLAGS_DEBUG "${COMMON_C_FLAGS_DEBUG} ${ANDROID_C_FLAGS_DEBUG} ${ANDROID_C_FLAGS_${TARGET_ARCHITECTURE}_Debug}" CACHE STRING "C Debug Flags")
set(CMAKE_C_FLAGS_RELEASE "${COMMON_C_FLAGS_RELEASE} ${ANDROID_C_FLAGS_RELEASE} ${ANDROID_C_FLAGS_${TARGET_ARCHITECTURE}_Release}" CACHE STRING "C Release Flags")
set(CMAKE_CXX_FLAGS "--sysroot=\"${ANDROID_ROOT_PATH}\" ${ANDROID_LLVM_C_FLAGS} ${ANDROID_C_FLAGS} ${ANDROID_C_FLAGS_${TARGET_ARCHITECTURE}}" CACHE STRING "CXX Flags")
set(CMAKE_CXX_FLAGS_DEBUG "${COMMON_C_FLAGS_DEBUG} ${ANDROID_C_FLAGS_DEBUG} ${ANDROID_C_FLAGS_${TARGET_ARCHITECTURE}_Debug}" CACHE STRING "CXX Debug Flags")
set(CMAKE_CXX_FLAGS_RELEASE "${COMMON_C_FLAGS_RELEASE} ${ANDROID_C_FLAGS_RELEASE} ${ANDROID_C_FLAGS_${TARGET_ARCHITECTURE}_Release}" CACHE STRING "CXX Release Flags")
set(CMAKE_SHARED_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} ${ANDROID_LINKER_FLAGS_${TARGET_ARCHITECTURE}}" CACHE STRING "Linker Flags for Shared Libraries")
set(CMAKE_MODULE_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} ${ANDROID_LINKER_FLAGS_${TARGET_ARCHITECTURE}}" CACHE STRING "Linker Flags for Modules")
set(CMAKE_EXE_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} ${ANDROID_LINKER_FLAGS_${TARGET_ARCHITECTURE}}" CACHE STRING "Linker Flags for Executables")
include(CMakeForceCompiler)
CMAKE_FORCE_C_COMPILER("${CMAKE_C_COMPILER}" "${ANDROID_COMPILER_ID}")
CMAKE_FORCE_CXX_COMPILER("${CMAKE_CXX_COMPILER}" "${ANDROID_COMPILER_ID}")

### Project Paths
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_ROOT_DIRECTORY}/${CMAKE_BUILD_TYPE}/Android/${ANDROID_API_VERSION}/${TARGET_ARCHITECTURE}" CACHE PATH "Runtime Outpath")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OUTPUT_ROOT_DIRECTORY}/${CMAKE_BUILD_TYPE}/Android/${ANDROID_API_VERSION}/${TARGET_ARCHITECTURE}" CACHE PATH "Library Outpath")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_ROOT_DIRECTORY}/${CMAKE_BUILD_TYPE}/Android/${ANDROID_API_VERSION}/${TARGET_ARCHITECTURE}" CACHE PATH "Archive Outpath")